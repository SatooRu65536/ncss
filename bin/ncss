#!/usr/bin/env node

const fs = require("fs");
const arg = require('arg');
const { Scanner } = require("../build/scanner.js");
const { Evaluator } = require("../build/evaluator.js");
const Parser = require("../build/parser.js");
const package = require("../package.json");

const args = arg({
    // Types
    '--help': Boolean,
    '--version': Boolean,
    '--token': Boolean,
    '--ast': Boolean,

    // Aliases
    '-v': '--version',
    '-h': '--help',
    '-t': '--token',
    '-a': '--ast',
});

if (args["--version"]) {
    console.log(package.version);
} else if (args._.length === 0 || args["--help"]) {
    const help_msg = [
        "ncss [flags] <command>",
        "",
        "Usage:",
        "",
        "ncss <filePath>    run the script named <filePath>.",
        "ncss help          show help.",
        "",
        "Flags:",
        "",
        "-h (--help)        show help.",
        "-v (--tokens)      show version.",
        "-t (--tokens)      generate token data file.",
        "-a (--ast)         generate abstract syntax tree file.",
        "",
    ];
    console.log(help_msg.join("\n"));
} else if (!fs.existsSync(args._[0])) {
    console.error(`ERROR: no such file or directory, open '${args._[0]}'`);
} else {
    const filePath = args._[0];
    fs.readFile(filePath, "utf-8", (err, ncss_data) => {
        if (err) throw console.log(err.message);

        const sc = new Scanner(ncss_data);
        if (args["--token"]) {
            fs.writeFile("ncss.tkn.json", JSON.stringify(sc), (e) => {
                if (e) console.log(e.message);
            });
        }

        const ast = Parser.parse(sc);
        if (args["--ast"]) {
            fs.writeFile("ncss.ast.json", JSON.stringify(ast), (e) => {
                if (e) console.log(e.message);
            });
        }

        new Evaluator().apply(ast).stdout.join("\n");
    });
}